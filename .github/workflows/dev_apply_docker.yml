name: Terraform Apply - Docker (Dev)

on:
  workflow_dispatch:

jobs:
  apply:
    runs-on: ubuntu-latest

    env:
      TERRAFORM_DIR: docker/dev

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Download terraform.tfvars from S3
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          aws s3 cp s3://${{ secrets.DEV_S3_INFRA_NAME }}/terraform.tfvars.enc terraform.tfvars.enc
          openssl aes-256-cbc -d -salt -pbkdf2 -in terraform.tfvars.enc -out terraform.tfvars -k "${{ secrets.DEV_TFVARS_ENC_PW }}"

      - name: Load selected env variables into GitHub Environment
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          source ./terraform.tfvars

          echo "::add-mask::$WEBHOOK_TOKEN"
          echo "WEBHOOK_TOKEN=$WEBHOOK_TOKEN" >> $GITHUB_ENV

      - name: /compose upload to S3
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: aws s3 cp ./compose s3://s3-careerbee-dev-infra/compose/ --recursive
        
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan

      - name: Reset parameter
        run: |
          PARAMS=(
            "/careerbee/dev/db"
            "/careerbee/dev/service"
            "/careerbee/dev/openvpn"
            "/careerbee/dev/gce"
          )

          for PARAM in "${PARAMS[@]}"; do
            aws ssm put-parameter \
              --name "$PARAM" \
              --value "unready" \
              --type "String" \
              --overwrite \
              --region ap-northeast-2
          done

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve

      - name: Wait for EC2 and GCE startup
        run: |
          set +e 

          MAX_RETRIES=30
          RETRY_DELAY=30 
          COUNT=0

          PARAMS=(
            "/careerbee/dev/db"
            "/careerbee/dev/service"
            "/careerbee/dev/openvpn"
            "/careerbee/dev/gce"
          )

          while [ $COUNT -lt $MAX_RETRIES ]; do
            echo "시도 $((COUNT + 1)) / $MAX_RETRIES"

            ALL_READY=true

            for PARAM in "${PARAMS[@]}"; do
              VALUE=$(aws ssm get-parameter \
                --name "$PARAM" \
                --query 'Parameter.Value' \
                --output text \
                --region ap-northeast-2 2>/dev/null || echo "not-found")

              echo "$PARAM = $VALUE"

              if [ "$VALUE" != "ready" ]; then
                ALL_READY=false
              fi
            done

            if [ "$ALL_READY" = true ]; then
              echo "✅ 모든 서비스가 ready 상태입니다."
              break
            fi
          
            echo "⏳ 아직 준비되지 않은 서비스가 있습니다. $RETRY_DELAY초 후 재시도..."
            sleep $RETRY_DELAY
            COUNT=$((COUNT + 1))
          done

          if [ $COUNT -eq $MAX_RETRIES ]; then
            echo "❌ 제한 시간 초과. 모든 서비스가 준비되지 않았습니다."
            exit 1
          fi

          set -e

      - name: Check Application Health
        run: |
          for i in $(seq 1 5); do
            echo "🔁 헬스 체크 시도 $i / 5..."

            FRONT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://www.dev.careerbee.co.kr/health-check")
            echo "EC2 서버 상태: $FRONT_STATUS"
            BACK_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://api.dev.careerbee.co.kr/health-check")
            echo "GCE 서버 상태: $BACK_STATUS"
            AI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://ai.dev.careerbee.co.kr/health-check")
            echo "AI 서버 상태: $AI_STATUS"

            if [ "$FRONT_STATUS" = "200" ] && [ "$BACK_STATUS" = "200" ] && [ "$AI_STATUS" = "200" ]; then
              echo "✅ 모든 서버 상태 정상"
              exit 0
            fi

            sleep 10
          done

          exit 1
          
      - name: DB restore
        run: |
          set -e
          if [[ "$(curl --max-time 5 -s -o /dev/null -w "%{http_code}" https://webhook.dev.careerbee.co.kr/health-check)" == "200" ]]; then
            curl https://webhook.dev.careerbee.co.kr/db_restore \
              -H "Authorization: Bearer ${{ env.WEBHOOK_TOKEN }}"
          else
            exit 1
          fi

      - name: Notify Discord on Success
        if: success()
        run: |
          jq -n \
            '{
              "embeds": [
                {
                  "title": "🚀 DEV 서버 시작",
                  "description": "커리어비 DEV 서버가 시작되었습니다.\n\n오늘도 열심히 일해요! 💪🏻💪🏻",
                  "color": 5763719,
                  "footer": { "text": "Cloud Functions - DEV Server" },
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
              -X POST \
              -d @payload.json \
              ${{ secrets.SERVER_DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          jq -n \
            --arg RUN_URL "$RUN_URL"
            '{
              "embeds": [
                {
                  "title": "❌ DEV 서버 배포 실패",
                  "description": "워크플로 실행 중 오류가 발생했습니다.\n\n로그를 확인해 주세요. 🔍\n\n[🔗 실행 로그 보기](\($RUN_URL))",
                  "color": 15548997,
                  "footer": { "text": "Cloud Functions - DEV Server" },
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
              -X POST \
              -d @payload.json \
              ${{ secrets.DISCORD_WEBHOOK_URL }}