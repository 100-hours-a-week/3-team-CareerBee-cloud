name: Terraform Apply (Dev)

on:
  push:
    branches: [ develop ]

  workflow_dispatch:

  schedule:
    - cron: '40 3 * * 1-5'

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TERRAFORM_DIR: transition/terraform/dev
      SCRIPT_DIR: transition/deploy/scripts

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Decrypt terraform.tfvars.enc
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          openssl aes-256-cbc -d -salt -pbkdf2 -in terraform.tfvars.enc -out terraform.tfvars -k "${{ secrets.DEV_TFVARS_ENC_PW }}"

      - name: Decrypt env file
        working-directory: ${{ env.SCRIPT_DIR }}
        run: |
          openssl enc -aes-256-cbc -d -pbkdf2 -in cicd-variables.sh.enc -out cicd-variables.sh -k "${{ secrets.DEV_CICD_VARIABLES_ENC_PW }}"
          chmod +x cicd-variables.sh
          source ./cicd-variables.sh

          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_DEFAULT_REGION"
          echo "::add-mask::$SSH_KEY"
          echo "::add-mask::$SSH_KEY_BASE64"
          echo "::add-mask::$AWS_SERVER_IP"
          echo "::add-mask::$GCP_SERVER_IP"
          echo "::add-mask::$DB_PASSWORD"
          echo "::add-mask::$S3_BUCKET_INFRA"

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV
          echo "SSH_KEY_BASE64=$SSH_KEY_BASE64" >> $GITHUB_ENV
          echo "AWS_SERVER_IP=$AWS_SERVER_IP" >> $GITHUB_ENV
          echo "GCP_SERVER_IP=$GCP_SERVER_IP" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "S3_BUCKET_INFRA=$S3_BUCKET_INFRA" >> $GITHUB_ENV

      - name: Restore SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY_BASE64}" | base64 --decode > "${SSH_KEY}"
          chmod 600 "${SSH_KEY}"

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve

      - name: Wait for EC2 and GCE startup
        run: |
          set +e 

          MAX_RETRIES=30
          RETRY_DELAY=30
          COUNT=0

          while [ $COUNT -lt $MAX_RETRIES ]; do
            echo "시도 $((COUNT + 1)) / $MAX_RETRIES"

            EC2_DONE=$(ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@$AWS_SERVER_IP 'test -f /home/ubuntu/tmp/ec2-startup.done && echo ok || echo no' 2>/dev/null || echo no)
            GCE_DONE=$(ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@$GCP_SERVER_IP 'test -f /home/ubuntu/tmp/gce-startup.done && echo ok || echo no' 2>/dev/null || echo no)

            if [ "$EC2_DONE" = "ok" ] && [ "$GCE_DONE" = "ok" ]; then
              break
            fi

            echo "⏳ 초기 환경 설정 중... ($RETRY_DELAY초 후 재시도)"
            sleep $RETRY_DELAY
            COUNT=$((COUNT + 1))
          done

          if [ $COUNT -eq $MAX_RETRIES ]; then
            exit 1
          fi

          set -e

      - name: Run DB Restore Script
        working-directory: ${{ env.SCRIPT_DIR }}
        run: bash db-restore.sh

      - name: Clean up
        if: always()
        run: |
          rm -f ${{ env.TERRAFORM_DIR }}/terraform.tfvars
          rm -f ${{ env.SCRIPT_DIR }}/cicd-variables.sh

      - name: Notify Discord on Success
        if: success()
        run: |
          jq -n \
            '{
              "embeds": [
                {
                  "title": "🚀 DEV 서버 시작",
                  "description": "커리어비 DEV 서버가 시작되었습니다.\n\n오늘도 열심히 일해요! 💪🏻💪🏻",
                  "color": 5763719,
                  "footer": { "text": "Cloud Functions - DEV Server" },
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
              -X POST \
              -d @payload.json \
              ${{ secrets.SERVER_DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          jq -n \
            '{
              "embeds": [
                {
                  "title": "❌ DEV 서버 배포 실패",
                  "description": "워크플로 실행 중 오류가 발생했습니다.\n\n로그를 확인해 주세요. 🔍",
                  "color": 15548997,
                  "footer": { "text": "Cloud Functions - DEV Server" },
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
              -X POST \
              -d @payload.json \
              ${{ secrets.DISCORD_WEBHOOK_URL }}